apiVersion: v1
kind: ConfigMap
metadata:
  name: trade-platform-config
data:
  ENVIRONMENT: "production"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_USER: "postgres"
  DB_NAME: "trading_platform"
  DB_SSLMODE: "disable"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  SERVER_PORT: "8080"
  GRPC_PORT: "9090"
---
apiVersion: v1
kind: Secret
metadata:
  name: trade-platform-secrets
type: Opaque
stringData:
  DB_PASSWORD: "postgres"
  REDIS_PASSWORD: "redis_password"
  JWT_SECRET: "your-secret-key-change-in-production"
  REFRESH_SECRET: "your-refresh-secret-change-in-production"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: timescale/timescaledb:latest-pg14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trade-platform-secrets
              key: DB_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: DB_NAME
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        args: ["--requirepass", "$(REDIS_PASSWORD)"]
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trade-platform-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-gateway
  template:
    metadata:
      labels:
        app: backend-gateway
    spec:
      containers:
      - name: backend-gateway
        image: trade-platform/backend-gateway:latest
        ports:
        - containerPort: 8080
        - containerPort: 9090
        env:
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: SERVER_PORT
        - name: GRPC_PORT
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: GRPC_PORT
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: ENVIRONMENT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: DB_PORT
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trade-platform-secrets
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: DB_NAME
        - name: DB_SSLMODE
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: DB_SSLMODE
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: trade-platform-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trade-platform-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: trade-platform-secrets
              key: JWT_SECRET
        - name: REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: trade-platform-secrets
              key: REFRESH_SECRET
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: backend-gateway-service
spec:
  selector:
    app: backend-gateway
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: grpc
    port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: trade-platform-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: api.trade-platform.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-gateway-service
            port:
              number: 8080
  - host: trade-platform.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
