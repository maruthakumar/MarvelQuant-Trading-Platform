From 008ff98a0e3d7bde64a1fb0800b640fd24ef17ff Mon Sep 17 00:00:00 2001
From: MarvelQuant Developer <marvelquant@example.com>
Date: Wed, 9 Apr 2025 18:25:33 -0400
Subject: [PATCH] Improve UI with fixed logo path and enhanced portfolio
 creation page

---
 frontend/src/App.js                           |   31 +
 frontend/src/components/common/Sidebar.jsx    |    2 +-
 .../components/multileg/MultiLegComponent.jsx | 1013 ++---------------
 .../components/multileg/NewPortfolioPage.jsx  |  465 ++++++++
 4 files changed, 580 insertions(+), 931 deletions(-)
 create mode 100644 frontend/src/App.js
 create mode 100644 frontend/src/components/multileg/NewPortfolioPage.jsx

diff --git a/frontend/src/App.js b/frontend/src/App.js
new file mode 100644
index 0000000..51f6eee
--- /dev/null
+++ b/frontend/src/App.js
@@ -0,0 +1,31 @@
+import React from 'react';
+import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
+import LoginPage from './components/auth/LoginPage';
+import Dashboard from './components/dashboard/Dashboard';
+import OrderBook from './components/orderbook/OrderBook';
+import Positions from './components/positions/Positions';
+import UserSettings from './components/settings/UserSettings';
+import Strategies from './components/strategies/Strategies';
+import MultiLegComponent from './components/multileg/MultiLegComponent';
+import NewPortfolioPage from './components/multileg/NewPortfolioPage';
+import ProtectedRoute from './components/auth/ProtectedRoute';
+
+function App() {
+  return (
+    <Router>
+      <Routes>
+        <Route path="/login" element={<LoginPage />} />
+        <Route path="/" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
+        <Route path="/orderbook" element={<ProtectedRoute><OrderBook /></ProtectedRoute>} />
+        <Route path="/positions" element={<ProtectedRoute><Positions /></ProtectedRoute>} />
+        <Route path="/user-settings" element={<ProtectedRoute><UserSettings /></ProtectedRoute>} />
+        <Route path="/strategies" element={<ProtectedRoute><Strategies /></ProtectedRoute>} />
+        <Route path="/multi-leg" element={<ProtectedRoute><MultiLegComponent /></ProtectedRoute>} />
+        <Route path="/multi-leg/new-portfolio" element={<ProtectedRoute><NewPortfolioPage /></ProtectedRoute>} />
+        <Route path="*" element={<Navigate to="/" replace />} />
+      </Routes>
+    </Router>
+  );
+}
+
+export default App;
diff --git a/frontend/src/components/common/Sidebar.jsx b/frontend/src/components/common/Sidebar.jsx
index 5777eaa..f307d2a 100644
--- a/frontend/src/components/common/Sidebar.jsx
+++ b/frontend/src/components/common/Sidebar.jsx
@@ -80,7 +80,7 @@ const Sidebar = () => {
           {open && (
             <Box 
               component="img"
-              src="/images/MQ-Logo-Main.svg"
+              src="/assets/images/MQ Logo-Main.svg"
               alt="MarvelQuant"
               sx={{ 
                 height: 32, 
diff --git a/frontend/src/components/multileg/MultiLegComponent.jsx b/frontend/src/components/multileg/MultiLegComponent.jsx
index 7e4dbc9..39c4c5c 100644
--- a/frontend/src/components/multileg/MultiLegComponent.jsx
+++ b/frontend/src/components/multileg/MultiLegComponent.jsx
@@ -1,946 +1,99 @@
-import React, { useState, useEffect } from 'react';
-import { 
-  Box, 
-  Typography, 
-  Paper, 
-  Grid, 
-  List, 
-  ListItem, 
-  ListItemText,
-  Divider,
-  Button,
-  IconButton,
-  Dialog,
-  DialogTitle,
-  DialogContent,
-  DialogActions,
-  TextField,
-  FormControl,
-  InputLabel,
-  Select,
-  MenuItem,
-  Table,
-  TableBody,
-  TableCell,
-  TableContainer,
-  TableHead,
-  TableRow,
-  Checkbox,
-  Tooltip,
-  Chip,
-  Snackbar,
-  Alert,
-  Menu,
-  Badge
-} from '@mui/material';
+import React, { useState } from 'react';
+import { useNavigate } from 'react-router-dom';
+import { Box, Button, Typography, Paper, Grid } from '@mui/material';
 import AddIcon from '@mui/icons-material/Add';
-import SettingsIcon from '@mui/icons-material/Settings';
-import RefreshIcon from '@mui/icons-material/Refresh';
-import DeleteIcon from '@mui/icons-material/Delete';
-import EditIcon from '@mui/icons-material/Edit';
-import ContentCopyIcon from '@mui/icons-material/ContentCopy';
-import PlayArrowIcon from '@mui/icons-material/PlayArrow';
-import StopIcon from '@mui/icons-material/Stop';
-import CheckCircleIcon from '@mui/icons-material/CheckCircle';
-import RestartAltIcon from '@mui/icons-material/RestartAlt';
-import ShowChartIcon from '@mui/icons-material/ShowChart';
-import ReplayIcon from '@mui/icons-material/Replay';
-import SplitscreenIcon from '@mui/icons-material/Splitscreen';
-import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
-import FilterListIcon from '@mui/icons-material/FilterList';
 import PortfolioComponent from './PortfolioComponent';
-import LogsPanel from '../logs/LogsPanel';
 
 const MultiLegComponent = () => {
-  const [selectedPortfolio, setSelectedPortfolio] = useState(null);
-  const [portfolios, setPortfolios] = useState([
-    { 
-      id: 'portfolio1', 
-      name: 'S8 1005-1100 CP35 3:1', 
-      symbol: 'NIFTY',
-      status: 'Monitoring',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio2', 
-      name: 'S8 1051 CP45 15/20/25', 
-      symbol: 'NIFTY',
-      status: 'Monitoring',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio3', 
-      name: 'SSNIF', 
-      symbol: 'NIFTY',
-      status: 'Monitoring',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio4', 
-      name: 'S10', 
-      symbol: 'NIFTY',
-      status: 'Monitoring',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio5', 
-      name: 'S4 935 CP45 15 LT 40%', 
-      symbol: 'NIFTY',
-      status: 'Monitoring',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio6', 
-      name: 'SENIF', 
-      symbol: 'NIFTY',
-      status: 'Monitoring',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio7', 
-      name: '1051 CP120 35-40 15%', 
-      symbol: 'BANKNIFTY',
-      status: 'Monitoring',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio8', 
-      name: 'MORB31 V8 9:16 TO 9:17', 
-      symbol: 'BANKNIFTY',
-      status: 'Completed',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: -131820.00,
-      currentValue: 22100.00,
-      valuePerLot: 110.50,
-      underlyingPrice: 51625.15,
-      underlyingLTP: 51680.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: true,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio9', 
-      name: 'S 1', 
-      symbol: 'BANKNIFTY',
-      status: 'Monitoring',
-      strategy: 'BACKENZOBUYING',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    },
-    { 
-      id: 'portfolio10', 
-      name: 'NF_NDSTR', 
-      symbol: 'NIFTY',
-      status: 'UnderExecution',
-      strategy: 'NF-NDSTR-D',
-      enabled: true,
-      pnl: -1612.50,
-      currentValue: -1996.50,
-      valuePerLot: -199.65,
-      underlyingPrice: 23690.25,
-      underlyingLTP: 23690.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    }
-  ]);
-  
-  // Group portfolios by symbol
-  const symbols = {};
-  portfolios.forEach(portfolio => {
-    if (!symbols[portfolio.symbol]) {
-      symbols[portfolio.symbol] = [];
-    }
-    symbols[portfolio.symbol].push(portfolio);
-  });
-  
-  const [expandedSymbols, setExpandedSymbols] = useState({
-    NIFTY: true,
-    BANKNIFTY: true,
-    SENSEX: false
-  });
-  
-  const [openDialog, setOpenDialog] = useState(false);
-  const [newPortfolioName, setNewPortfolioName] = useState('');
-  const [newPortfolioSymbol, setNewPortfolioSymbol] = useState('NIFTY');
-  const [newPortfolioStrategy, setNewPortfolioStrategy] = useState('BACKENZOBUYING');
-  
-  const [snackbar, setSnackbar] = useState({
-    open: false,
-    message: '',
-    severity: 'success'
-  });
-  
-  const [filterMenuAnchor, setFilterMenuAnchor] = useState(null);
-  const [statusFilter, setStatusFilter] = useState('All');
-  
-  const toggleSymbol = (symbol) => {
-    setExpandedSymbols({
-      ...expandedSymbols,
-      [symbol]: !expandedSymbols[symbol]
-    });
-  };
-  
-  const handlePortfolioSelect = (portfolio) => {
-    setSelectedPortfolio(portfolio);
-  };
-  
-  const handleAddPortfolio = () => {
-    setOpenDialog(true);
-    setNewPortfolioName('');
-    setNewPortfolioSymbol('NIFTY');
-    setNewPortfolioStrategy('BACKENZOBUYING');
-  };
-  
-  const handleCloseDialog = () => {
-    setOpenDialog(false);
-  };
-  
-  const handleCreatePortfolio = () => {
-    if (!newPortfolioName) {
-      setSnackbar({
-        open: true,
-        message: 'Portfolio name is required',
-        severity: 'error'
-      });
-      return;
-    }
-    
-    const newPortfolio = {
-      id: `portfolio${Date.now()}`,
-      name: newPortfolioName,
-      symbol: newPortfolioSymbol,
-      strategy: newPortfolioStrategy,
-      status: 'Monitoring',
-      enabled: true,
-      pnl: 0.00,
-      currentValue: 0.00,
-      valuePerLot: 0.00,
-      underlyingPrice: 0.00,
-      underlyingLTP: 0.00,
-      executeSquareOff: false,
-      edit: false,
-      makeCopy: false,
-      clone: false,
-      delete: false,
-      markAsCompleted: false,
-      reset: false,
-      payoff: false,
-      chart: false,
-      reexecute: false,
-      partEntryExit: false
-    };
-    
-    setPortfolios([...portfolios, newPortfolio]);
-    
-    // Ensure the symbol is expanded
-    if (!expandedSymbols[newPortfolioSymbol]) {
-      setExpandedSymbols({
-        ...expandedSymbols,
-        [newPortfolioSymbol]: true
-      });
-    }
-    
-    setOpenDialog(false);
-    
-    // Select the new portfolio
-    setSelectedPortfolio(newPortfolio);
-    
-    setSnackbar({
-      open: true,
-      message: 'Portfolio created successfully',
-      severity: 'success'
-    });
-  };
-  
-  const handleDeletePortfolio = (portfolioId) => {
-    if (window.confirm('Are you sure you want to delete this portfolio?')) {
-      const updatedPortfolios = portfolios.filter(p => p.id !== portfolioId);
-      setPortfolios(updatedPortfolios);
-      
-      if (selectedPortfolio && selectedPortfolio.id === portfolioId) {
-        setSelectedPortfolio(null);
-      }
-      
-      setSnackbar({
-        open: true,
-        message: 'Portfolio deleted successfully',
-        severity: 'success'
-      });
-    }
-  };
-  
-  const handleToggleEnabled = (portfolioId) => {
-    const updatedPortfolios = portfolios.map(p => 
-      p.id === portfolioId ? { ...p, enabled: !p.enabled } : p
-    );
-    setPortfolios(updatedPortfolios);
-    
-    if (selectedPortfolio && selectedPortfolio.id === portfolioId) {
-      setSelectedPortfolio({
-        ...selectedPortfolio,
-        enabled: !selectedPortfolio.enabled
-      });
-    }
+  const navigate = useNavigate();
+  const [portfolios, setPortfolios] = useState([]);
+  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
+
+  // Handle creating a new portfolio
+  const handleNewPortfolio = () => {
+    // Navigate to the dedicated new portfolio page instead of showing a dialog
+    navigate('/multi-leg/new-portfolio');
   };
-  
-  const handleMarkAsCompleted = (portfolioId) => {
-    const updatedPortfolios = portfolios.map(p => 
-      p.id === portfolioId ? { 
-        ...p, 
-        markAsCompleted: !p.markAsCompleted,
-        status: p.markAsCompleted ? 'Monitoring' : 'Completed'
-      } : p
-    );
+
+  // This would be called when a portfolio is deleted
+  const handleDeletePortfolio = (index) => {
+    const updatedPortfolios = [...portfolios];
+    updatedPortfolios.splice(index, 1);
     setPortfolios(updatedPortfolios);
-    
-    if (selectedPortfolio && selectedPortfolio.id === portfolioId) {
-      setSelectedPortfolio({
-        ...selectedPortfolio,
-        markAsCompleted: !selectedPortfolio.markAsCompleted,
-        status: selectedPortfolio.markAsCompleted ? 'Monitoring' : 'Completed'
-      });
-    }
-  };
-  
-  const handleCloseSnackbar = () => {
-    setSnackbar({
-      ...snackbar,
-      open: false
-    });
-  };
-  
-  const handleOpenFilterMenu = (event) => {
-    setFilterMenuAnchor(event.currentTarget);
-  };
-  
-  const handleCloseFilterMenu = () => {
-    setFilterMenuAnchor(null);
-  };
-  
-  const handleStatusFilterChange = (status) => {
-    setStatusFilter(status);
-    handleCloseFilterMenu();
-  };
-  
-  const filteredPortfolios = statusFilter === 'All' 
-    ? portfolios 
-    : portfolios.filter(p => p.status === statusFilter);
-  
-  const getStatusColor = (status) => {
-    switch (status) {
-      case 'Monitoring':
-        return '#4caf50';
-      case 'Completed':
-        return '#2196f3';
-      case 'UnderExecution':
-        return '#ff9800';
-      case 'Disabled':
-        return '#f44336';
-      default:
-        return 'inherit';
-    }
-  };
-  
-  const handleExecuteSquareOff = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Execute/Square Off action triggered',
-      severity: 'info'
-    });
-  };
-  
-  const handleEdit = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Edit action triggered',
-      severity: 'info'
-    });
-  };
-  
-  const handleMakeCopy = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Make Copy action triggered',
-      severity: 'info'
-    });
-  };
-  
-  const handleClone = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Clone action triggered',
-      severity: 'info'
-    });
-  };
-  
-  const handleReset = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Reset action triggered',
-      severity: 'info'
-    });
-  };
-  
-  const handlePayoff = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Payoff action triggered',
-      severity: 'info'
-    });
   };
-  
-  const handleChart = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Chart action triggered',
-      severity: 'info'
-    });
-  };
-  
-  const handleReexecute = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Reexecute action triggered',
-      severity: 'info'
-    });
-  };
-  
-  const handlePartEntryExit = (portfolioId) => {
-    setSnackbar({
-      open: true,
-      message: 'Part Entry/Exit action triggered',
-      severity: 'info'
-    });
-  };
-  
+
   return (
-    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
-      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
-        <Typography variant="h6">Multi-Leg Portfolio Management</Typography>
-        <Box>
+    <Box sx={{ p: 3 }}>
+      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
+        <Typography variant="h4">Multi-Leg Portfolios</Typography>
+        <Button 
+          variant="contained" 
+          startIcon={<AddIcon />} 
+          onClick={handleNewPortfolio}
+          sx={{ 
+            backgroundColor: '#1976d2',
+            '&:hover': {
+              backgroundColor: '#1565c0',
+            }
+          }}
+        >
+          New Portfolio
+        </Button>
+      </Box>
+
+      {showSuccessMessage && (
+        <Paper 
+          sx={{ 
+            p: 2, 
+            mb: 3, 
+            backgroundColor: '#e8f5e9',
+            display: 'flex',
+            justifyContent: 'space-between',
+            alignItems: 'center'
+          }}
+        >
+          <Typography variant="body1" color="success.main">
+            Portfolio created successfully!
+          </Typography>
           <Button 
-            variant="contained" 
             size="small" 
-            startIcon={<AddIcon />}
-            onClick={handleAddPortfolio}
-            sx={{ mr: 1 }}
+            onClick={() => setShowSuccessMessage(false)}
+            sx={{ color: '#2e7d32' }}
           >
-            New Portfolio
+            Dismiss
           </Button>
-          <IconButton size="small" onClick={handleOpenFilterMenu}>
-            <Badge color="primary" variant="dot" invisible={statusFilter === 'All'}>
-              <FilterListIcon />
-            </Badge>
-          </IconButton>
-        </Box>
-      </Box>
-      
-      <Menu
-        anchorEl={filterMenuAnchor}
-        open={Boolean(filterMenuAnchor)}
-        onClose={handleCloseFilterMenu}
-      >
-        <MenuItem 
-          onClick={() => handleStatusFilterChange('All')}
-          selected={statusFilter === 'All'}
-        >
-          All Statuses
-        </MenuItem>
-        <MenuItem 
-          onClick={() => handleStatusFilterChange('Monitoring')}
-          selected={statusFilter === 'Monitoring'}
-        >
-          Monitoring
-        </MenuItem>
-        <MenuItem 
-          onClick={() => handleStatusFilterChange('Completed')}
-          selected={statusFilter === 'Completed'}
-        >
-          Completed
-        </MenuItem>
-        <MenuItem 
-          onClick={() => handleStatusFilterChange('UnderExecution')}
-          selected={statusFilter === 'UnderExecution'}
-        >
-          Under Execution
-        </MenuItem>
-        <MenuItem 
-          onClick={() => handleStatusFilterChange('Disabled')}
-          selected={statusFilter === 'Disabled'}
-        >
-          Disabled
-        </MenuItem>
-      </Menu>
-      
-      <Typography variant="caption" color="textSecondary" sx={{ mb: 1 }}>
-        Drag a column to group
-      </Typography>
-      
-      <Paper sx={{ flexGrow: 1, mb: 2, overflow: 'hidden' }}>
-        <TableContainer sx={{ maxHeight: 'calc(100vh - 300px)' }}>
-          <Table stickyHeader size="small">
-            <TableHead>
-              <TableRow>
-                <TableCell padding="checkbox">
-                  <Typography variant="subtitle2">Enabled</Typography>
-                </TableCell>
-                <TableCell>Status</TableCell>
-                <TableCell>Portfolio Name</TableCell>
-                <TableCell>Symbol</TableCell>
-                <TableCell>Execute / SqOff</TableCell>
-                <TableCell>Edit</TableCell>
-                <TableCell>Make Copy</TableCell>
-                <TableCell>Clone</TableCell>
-                <TableCell>Delete</TableCell>
-                <TableCell>Mark As Completed</TableCell>
-                <TableCell>Strategy Tag</TableCell>
-                <TableCell>Reset</TableCell>
-                <TableCell>PayOff</TableCell>
-                <TableCell>Chart</TableCell>
-                <TableCell>Reexecute</TableCell>
-                <TableCell>Part Entry / Exit</TableCell>
-                <TableCell>PNL</TableCell>
-                <TableCell>Current Value</TableCell>
-                <TableCell>Value Per Lot</TableCell>
-                <TableCell>Underlying Price</TableCell>
-                <TableCell>Underlying LTP</TableCell>
-              </TableRow>
-            </TableHead>
-            <TableBody>
-              {filteredPortfolios.map((portfolio) => (
-                <TableRow 
-                  key={portfolio.id}
-                  hover
-                  selected={selectedPortfolio && selectedPortfolio.id === portfolio.id}
-                  onClick={() => handlePortfolioSelect(portfolio)}
-                  sx={{ 
-                    cursor: 'pointer',
-                    bgcolor: portfolio.status === 'Completed' ? 'rgba(33, 150, 243, 0.05)' : 
-                            portfolio.status === 'UnderExecution' ? 'rgba(255, 152, 0, 0.05)' :
-                            portfolio.status === 'Disabled' ? 'rgba(244, 67, 54, 0.05)' :
-                            'rgba(76, 175, 80, 0.05)'
-                  }}
-                >
-                  <TableCell padding="checkbox">
-                    <Checkbox
-                      checked={portfolio.enabled}
-                      onChange={() => handleToggleEnabled(portfolio.id)}
-                      onClick={(e) => e.stopPropagation()}
-                    />
-                  </TableCell>
-                  <TableCell>
-                    <Typography 
-                      variant="body2" 
-                      sx={{ 
-                        color: getStatusColor(portfolio.status),
-                        fontWeight: 'medium'
-                      }}
-                    >
-                      {portfolio.status}
-                    </Typography>
-                  </TableCell>
-                  <TableCell>{portfolio.name}</TableCell>
-                  <TableCell>{portfolio.symbol}</TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleExecuteSquareOff(portfolio.id);
-                      }}
-                    >
-                      <PlayArrowIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleEdit(portfolio.id);
-                      }}
-                    >
-                      <EditIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleMakeCopy(portfolio.id);
-                      }}
-                    >
-                      <ContentCopyIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleClone(portfolio.id);
-                      }}
-                    >
-                      <ContentCopyIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="error"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleDeletePortfolio(portfolio.id);
-                      }}
-                    >
-                      <DeleteIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <Checkbox
-                      checked={portfolio.markAsCompleted || portfolio.status === 'Completed'}
-                      onChange={() => handleMarkAsCompleted(portfolio.id)}
-                      onClick={(e) => e.stopPropagation()}
-                    />
-                  </TableCell>
-                  <TableCell>
-                    <Chip 
-                      label={portfolio.strategy} 
-                      size="small" 
-                      color="primary" 
-                      variant="outlined"
-                    />
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleReset(portfolio.id);
-                      }}
-                    >
-                      <RestartAltIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handlePayoff(portfolio.id);
-                      }}
-                    >
-                      <AttachMoneyIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleChart(portfolio.id);
-                      }}
-                    >
-                      <ShowChartIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleReexecute(portfolio.id);
-                      }}
-                    >
-                      <ReplayIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell>
-                    <IconButton 
-                      size="small" 
-                      color="primary"
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handlePartEntryExit(portfolio.id);
-                      }}
-                    >
-                      <SplitscreenIcon fontSize="small" />
-                    </IconButton>
-                  </TableCell>
-                  <TableCell sx={{ 
-                    color: portfolio.pnl > 0 ? 'success.main' : portfolio.pnl < 0 ? 'error.main' : 'text.primary',
-                    fontWeight: portfolio.pnl !== 0 ? 'bold' : 'normal'
-                  }}>
-                    {portfolio.pnl.toFixed(2)}
-                  </TableCell>
-                  <TableCell>{portfolio.currentValue.toFixed(2)}</TableCell>
-                  <TableCell>{portfolio.valuePerLot.toFixed(2)}</TableCell>
-                  <TableCell>{portfolio.underlyingPrice.toFixed(2)}</TableCell>
-                  <TableCell>{portfolio.underlyingLTP.toFixed(2)}</TableCell>
-                </TableRow>
-              ))}
-              {filteredPortfolios.length === 0 && (
-                <TableRow>
-                  <TableCell colSpan={21} align="center" sx={{ py: 3 }}>
-                    <Typography variant="body2" color="textSecondary">
-                      No portfolios found
-                    </Typography>
-                  </TableCell>
-                </TableRow>
-              )}
-            </TableBody>
-          </Table>
-        </TableContainer>
-      </Paper>
-      
-      {/* Main content area for portfolio details */}
-      <Grid container spacing={2} sx={{ flexGrow: 1 }}>
-        <Grid item xs={12}>
-          {selectedPortfolio ? (
-            <PortfolioComponent portfolio={selectedPortfolio} />
-          ) : (
-            <Paper sx={{ p: 4, height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>
-              <Typography variant="h6" color="textSecondary" sx={{ mb: 2 }}>
-                No Portfolio Selected
-              </Typography>
-              <Typography variant="body2" color="textSecondary" sx={{ mb: 3, textAlign: 'center' }}>
-                Please select a portfolio from the table above or create a new one.
-              </Typography>
-              <Button 
-                variant="contained" 
-                startIcon={<AddIcon />}
-                onClick={handleAddPortfolio}
-              >
-                Create New Portfolio
-              </Button>
-            </Paper>
-          )}
+        </Paper>
+      )}
+
+      {portfolios.length > 0 ? (
+        <Grid container spacing={3}>
+          {portfolios.map((portfolio, index) => (
+            <Grid item xs={12} key={index}>
+              <PortfolioComponent 
+                portfolio={portfolio} 
+                onDelete={() => handleDeletePortfolio(index)} 
+              />
+            </Grid>
+          ))}
         </Grid>
-      </Grid>
-      
-      {/* Add Portfolio Dialog */}
-      <Dialog open={openDialog} onClose={handleCloseDialog}>
-        <DialogTitle>Create New Portfolio</DialogTitle>
-        <DialogContent>
-          <TextField
-            autoFocus
-            margin="dense"
-            label="Portfolio Name"
-            fullWidth
-            value={newPortfolioName}
-            onChange={(e) => setNewPortfolioName(e.target.value)}
-            sx={{ mb: 2, mt: 1 }}
-          />
-          <FormControl fullWidth sx={{ mb: 2 }}>
-            <InputLabel>Symbol</InputLabel>
-            <Select
-              value={newPortfolioSymbol}
-              label="Symbol"
-              onChange={(e) => setNewPortfolioSymbol(e.target.value)}
-            >
-              <MenuItem value="NIFTY">NIFTY</MenuItem>
-              <MenuItem value="BANKNIFTY">BANKNIFTY</MenuItem>
-              <MenuItem value="FINNIFTY">FINNIFTY</MenuItem>
-              <MenuItem value="SENSEX">SENSEX</MenuItem>
-            </Select>
-          </FormControl>
-          <FormControl fullWidth>
-            <InputLabel>Strategy</InputLabel>
-            <Select
-              value={newPortfolioStrategy}
-              label="Strategy"
-              onChange={(e) => setNewPortfolioStrategy(e.target.value)}
-            >
-              <MenuItem value="BACKENZOBUYING">BACKENZOBUYING</MenuItem>
-              <MenuItem value="NF-NDSTR-D">NF-NDSTR-D</MenuItem>
-              <MenuItem value="MARU">MARU</MenuItem>
-              <MenuItem value="LUX24VR">LUX24VR</MenuItem>
-              <MenuItem value="NFTTR">NFTTR</MenuItem>
-            </Select>
-          </FormControl>
-        </DialogContent>
-        <DialogActions>
-          <Button onClick={handleCloseDialog}>Cancel</Button>
-          <Button onClick={handleCreatePortfolio} variant="contained">Create</Button>
-        </DialogActions>
-      </Dialog>
-      
-      {/* Snackbar for notifications */}
-      <Snackbar
-        open={snackbar.open}
-        autoHideDuration={6000}
-        onClose={handleCloseSnackbar}
-        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
-      >
-        <Alert 
-          onClose={handleCloseSnackbar} 
-          severity={snackbar.severity} 
-          sx={{ width: '100%' }}
-        >
-          {snackbar.message}
-        </Alert>
-      </Snackbar>
+      ) : (
+        <Paper sx={{ p: 4, textAlign: 'center' }}>
+          <Typography variant="h6" color="text.secondary" gutterBottom>
+            No portfolios yet
+          </Typography>
+          <Typography variant="body1" color="text.secondary" paragraph>
+            Create your first portfolio by clicking the "New Portfolio" button above.
+          </Typography>
+          <Button 
+            variant="outlined" 
+            startIcon={<AddIcon />} 
+            onClick={handleNewPortfolio}
+            sx={{ mt: 2 }}
+          >
+            Create Portfolio
+          </Button>
+        </Paper>
+      )}
     </Box>
   );
 };
diff --git a/frontend/src/components/multileg/NewPortfolioPage.jsx b/frontend/src/components/multileg/NewPortfolioPage.jsx
new file mode 100644
index 0000000..04cd486
--- /dev/null
+++ b/frontend/src/components/multileg/NewPortfolioPage.jsx
@@ -0,0 +1,465 @@
+import React, { useState } from 'react';
+import { 
+  Box, 
+  Typography, 
+  Paper, 
+  TextField, 
+  FormControl, 
+  InputLabel, 
+  Select, 
+  MenuItem, 
+  Button,
+  Grid,
+  Breadcrumbs,
+  Link,
+  Container,
+  Card,
+  CardContent,
+  Divider,
+  Tabs,
+  Tab,
+  FormControlLabel,
+  Switch,
+  Tooltip,
+  IconButton
+} from '@mui/material';
+import { useNavigate } from 'react-router-dom';
+import ArrowBackIcon from '@mui/icons-material/ArrowBack';
+import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
+import InfoIcon from '@mui/icons-material/Info';
+
+const NewPortfolioPage = () => {
+  const navigate = useNavigate();
+  const [portfolioName, setPortfolioName] = useState('');
+  const [symbol, setSymbol] = useState('NIFTY');
+  const [strategy, setStrategy] = useState('BACKENZOBUYING');
+  const [activeTab, setActiveTab] = useState(0);
+  
+  // Basic Information
+  const [description, setDescription] = useState('');
+  const [initialCapital, setInitialCapital] = useState('100000');
+  const [exchangeValue, setExchangeValue] = useState('NSE');
+  const [expiryValue, setExpiryValue] = useState('09-Apr-25');
+  const [defaultLots, setDefaultLots] = useState('10');
+  const [lotSize, setLotSize] = useState('75');
+  
+  // Strategy Configuration
+  const [strikeSelection, setStrikeSelection] = useState('Relative');
+  const [underlying, setUnderlying] = useState('Spot');
+  const [priceType, setPriceType] = useState('LTP');
+  const [strikeStep, setStrikeStep] = useState('50');
+  
+  // Portfolio Behavior
+  const [positionalPortfolio, setPositionalPortfolio] = useState(false);
+  const [buyTradesFirst, setBuyTradesFirst] = useState(true);
+  const [allowFarStrikes, setAllowFarStrikes] = useState(false);
+  
+  const handleTabChange = (event, newValue) => {
+    setActiveTab(newValue);
+  };
+  
+  const handleCreatePortfolio = () => {
+    if (!portfolioName) {
+      alert('Portfolio name is required');
+      return;
+    }
+    
+    // Here you would typically make an API call to create the portfolio
+    // For now, we'll just navigate back to the multi-leg page
+    navigate('/multi-leg', { 
+      state: { 
+        newPortfolio: {
+          name: portfolioName,
+          symbol,
+          strategy,
+          description,
+          initialCapital,
+          exchange: exchangeValue,
+          expiry: expiryValue,
+          defaultLots,
+          lotSize,
+          strikeSelection,
+          underlying,
+          priceType,
+          strikeStep,
+          positionalPortfolio,
+          buyTradesFirst,
+          allowFarStrikes
+        },
+        showSuccessMessage: true
+      } 
+    });
+  };
+  
+  const handleCancel = () => {
+    navigate('/multi-leg');
+  };
+  
+  return (
+    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
+      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
+        <Button
+          startIcon={<ArrowBackIcon />}
+          onClick={handleCancel}
+          sx={{ mr: 2 }}
+        >
+          Back
+        </Button>
+        <Breadcrumbs aria-label="breadcrumb">
+          <Link color="inherit" href="/multi-leg" onClick={(e) => { e.preventDefault(); navigate('/multi-leg'); }}>
+            Multi-Leg
+          </Link>
+          <Typography color="text.primary">New Portfolio</Typography>
+        </Breadcrumbs>
+      </Box>
+      
+      <Typography variant="h4" gutterBottom>
+        Create New Portfolio
+      </Typography>
+      
+      <Box sx={{ width: '100%', mb: 3 }}>
+        <Tabs 
+          value={activeTab} 
+          onChange={handleTabChange} 
+          aria-label="portfolio configuration tabs"
+          sx={{
+            '& .MuiTabs-indicator': {
+              backgroundColor: '#1976d2',
+            },
+            '& .Mui-selected': {
+              color: '#1976d2',
+              fontWeight: 'bold',
+            },
+          }}
+        >
+          <Tab label="Basic Information" />
+          <Tab label="Strategy Configuration" />
+          <Tab label="Portfolio Behavior" />
+        </Tabs>
+      </Box>
+      
+      {/* Basic Information Tab */}
+      {activeTab === 0 && (
+        <Paper sx={{ p: 3, mb: 4 }}>
+          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+            <Typography variant="h6">Basic Information</Typography>
+            <Tooltip title="Enter the fundamental details of your portfolio">
+              <IconButton size="small" sx={{ ml: 1 }}>
+                <InfoIcon fontSize="small" />
+              </IconButton>
+            </Tooltip>
+          </Box>
+          <Divider sx={{ mb: 3 }} />
+          
+          <Grid container spacing={3}>
+            <Grid item xs={12} md={6}>
+              <TextField
+                required
+                id="portfolioName"
+                label="Portfolio Name"
+                fullWidth
+                value={portfolioName}
+                onChange={(e) => setPortfolioName(e.target.value)}
+                helperText="Enter a unique name for your portfolio"
+              />
+            </Grid>
+            <Grid item xs={12} md={6}>
+              <TextField
+                id="description"
+                label="Description"
+                fullWidth
+                multiline
+                rows={2}
+                value={description}
+                onChange={(e) => setDescription(e.target.value)}
+                helperText="Optional: Add a description for this portfolio"
+              />
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <FormControl fullWidth>
+                <InputLabel id="exchange-label">Exchange</InputLabel>
+                <Select
+                  labelId="exchange-label"
+                  id="exchange"
+                  value={exchangeValue}
+                  label="Exchange"
+                  onChange={(e) => setExchangeValue(e.target.value)}
+                >
+                  <MenuItem value="NSE">NSE</MenuItem>
+                  <MenuItem value="BSE">BSE</MenuItem>
+                </Select>
+              </FormControl>
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <FormControl fullWidth>
+                <InputLabel id="symbol-label">Symbol</InputLabel>
+                <Select
+                  labelId="symbol-label"
+                  id="symbol"
+                  value={symbol}
+                  label="Symbol"
+                  onChange={(e) => setSymbol(e.target.value)}
+                >
+                  <MenuItem value="NIFTY">NIFTY</MenuItem>
+                  <MenuItem value="BANKNIFTY">BANKNIFTY</MenuItem>
+                  <MenuItem value="FINNIFTY">FINNIFTY</MenuItem>
+                  <MenuItem value="SENSEX">SENSEX</MenuItem>
+                </Select>
+              </FormControl>
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <FormControl fullWidth>
+                <InputLabel id="expiry-label">Expiry</InputLabel>
+                <Select
+                  labelId="expiry-label"
+                  id="expiry"
+                  value={expiryValue}
+                  label="Expiry"
+                  onChange={(e) => setExpiryValue(e.target.value)}
+                >
+                  <MenuItem value="09-Apr-25">09-Apr-25</MenuItem>
+                  <MenuItem value="16-Apr-25">16-Apr-25</MenuItem>
+                  <MenuItem value="23-Apr-25">23-Apr-25</MenuItem>
+                  <MenuItem value="30-Apr-25">30-Apr-25</MenuItem>
+                </Select>
+              </FormControl>
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <TextField
+                id="defaultLots"
+                label="Default Lots"
+                fullWidth
+                type="number"
+                value={defaultLots}
+                onChange={(e) => setDefaultLots(e.target.value)}
+              />
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <TextField
+                id="lotSize"
+                label="Lot Size"
+                fullWidth
+                type="number"
+                value={lotSize}
+                onChange={(e) => setLotSize(e.target.value)}
+              />
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <TextField
+                id="initialCapital"
+                label="Initial Capital"
+                fullWidth
+                type="number"
+                value={initialCapital}
+                onChange={(e) => setInitialCapital(e.target.value)}
+                InputProps={{
+                  startAdornment: <span style={{ marginRight: 8 }}>₹</span>,
+                }}
+              />
+            </Grid>
+          </Grid>
+        </Paper>
+      )}
+      
+      {/* Strategy Configuration Tab */}
+      {activeTab === 1 && (
+        <Paper sx={{ p: 3, mb: 4 }}>
+          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+            <Typography variant="h6">Strategy Configuration</Typography>
+            <Tooltip title="Configure the strategy parameters for your portfolio">
+              <IconButton size="small" sx={{ ml: 1 }}>
+                <InfoIcon fontSize="small" />
+              </IconButton>
+            </Tooltip>
+          </Box>
+          <Divider sx={{ mb: 3 }} />
+          
+          <Grid container spacing={3}>
+            <Grid item xs={12} md={6}>
+              <FormControl fullWidth>
+                <InputLabel id="strategy-label">Strategy</InputLabel>
+                <Select
+                  labelId="strategy-label"
+                  id="strategy"
+                  value={strategy}
+                  label="Strategy"
+                  onChange={(e) => setStrategy(e.target.value)}
+                >
+                  <MenuItem value="BACKENZOBUYING">BACKENZOBUYING</MenuItem>
+                  <MenuItem value="NF-NDSTR-D">NF-NDSTR-D</MenuItem>
+                  <MenuItem value="CUSTOM">CUSTOM</MenuItem>
+                </Select>
+              </FormControl>
+            </Grid>
+            <Grid item xs={12} md={6}>
+              <FormControl fullWidth>
+                <InputLabel id="strike-selection-label">Strike Selection</InputLabel>
+                <Select
+                  labelId="strike-selection-label"
+                  id="strikeSelection"
+                  value={strikeSelection}
+                  label="Strike Selection"
+                  onChange={(e) => setStrikeSelection(e.target.value)}
+                >
+                  <MenuItem value="Relative">Relative</MenuItem>
+                  <MenuItem value="Absolute">Absolute</MenuItem>
+                  <MenuItem value="ATM">ATM</MenuItem>
+                  <MenuItem value="NearestDelta">Nearest Delta</MenuItem>
+                  <MenuItem value="NearestPremium">Nearest Premium</MenuItem>
+                </Select>
+              </FormControl>
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <FormControl fullWidth>
+                <InputLabel id="underlying-label">Underlying</InputLabel>
+                <Select
+                  labelId="underlying-label"
+                  id="underlying"
+                  value={underlying}
+                  label="Underlying"
+                  onChange={(e) => setUnderlying(e.target.value)}
+                >
+                  <MenuItem value="Spot">Spot</MenuItem>
+                  <MenuItem value="Futures">Futures</MenuItem>
+                </Select>
+              </FormControl>
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <FormControl fullWidth>
+                <InputLabel id="price-type-label">Price Type</InputLabel>
+                <Select
+                  labelId="price-type-label"
+                  id="priceType"
+                  value={priceType}
+                  label="Price Type"
+                  onChange={(e) => setPriceType(e.target.value)}
+                >
+                  <MenuItem value="LTP">LTP</MenuItem>
+                  <MenuItem value="Bid">Bid</MenuItem>
+                  <MenuItem value="Ask">Ask</MenuItem>
+                </Select>
+              </FormControl>
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <TextField
+                id="strikeStep"
+                label="Strike Step"
+                fullWidth
+                type="number"
+                value={strikeStep}
+                onChange={(e) => setStrikeStep(e.target.value)}
+              />
+            </Grid>
+          </Grid>
+        </Paper>
+      )}
+      
+      {/* Portfolio Behavior Tab */}
+      {activeTab === 2 && (
+        <Paper sx={{ p: 3, mb: 4 }}>
+          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+            <Typography variant="h6">Portfolio Behavior</Typography>
+            <Tooltip title="Configure how your portfolio behaves during trading">
+              <IconButton size="small" sx={{ ml: 1 }}>
+                <InfoIcon fontSize="small" />
+              </IconButton>
+            </Tooltip>
+          </Box>
+          <Divider sx={{ mb: 3 }} />
+          
+          <Grid container spacing={3}>
+            <Grid item xs={12} md={4}>
+              <FormControlLabel
+                control={
+                  <Switch
+                    checked={positionalPortfolio}
+                    onChange={(e) => setPositionalPortfolio(e.target.checked)}
+                    name="positionalPortfolio"
+                  />
+                }
+                label="Positional Portfolio"
+              />
+              <Tooltip title="Enable for portfolios held overnight">
+                <IconButton size="small">
+                  <HelpOutlineIcon fontSize="small" />
+                </IconButton>
+              </Tooltip>
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <FormControlLabel
+                control={
+                  <Switch
+                    checked={buyTradesFirst}
+                    onChange={(e) => setBuyTradesFirst(e.target.checked)}
+                    name="buyTradesFirst"
+                  />
+                }
+                label="Buy Trades First"
+              />
+              <Tooltip title="Execute buy trades before sell trades">
+                <IconButton size="small">
+                  <HelpOutlineIcon fontSize="small" />
+                </IconButton>
+              </Tooltip>
+            </Grid>
+            <Grid item xs={12} md={4}>
+              <FormControlLabel
+                control={
+                  <Switch
+                    checked={allowFarStrikes}
+                    onChange={(e) => setAllowFarStrikes(e.target.checked)}
+                    name="allowFarStrikes"
+                  />
+                }
+                label="Allow Far Strikes"
+              />
+              <Tooltip title="Allow selection of strikes far from ATM">
+                <IconButton size="small">
+                  <HelpOutlineIcon fontSize="small" />
+                </IconButton>
+              </Tooltip>
+            </Grid>
+          </Grid>
+        </Paper>
+      )}
+      
+      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>
+        <Button 
+          variant="outlined" 
+          onClick={() => setActiveTab(Math.max(0, activeTab - 1))}
+          disabled={activeTab === 0}
+        >
+          Previous
+        </Button>
+        
+        <Box>
+          <Button 
+            variant="outlined" 
+            onClick={handleCancel}
+            sx={{ mr: 2 }}
+          >
+            Cancel
+          </Button>
+          {activeTab === 2 ? (
+            <Button 
+              variant="contained" 
+              onClick={handleCreatePortfolio}
+              disabled={!portfolioName}
+            >
+              Create Portfolio
+            </Button>
+          ) : (
+            <Button 
+              variant="contained" 
+              onClick={() => setActiveTab(Math.min(2, activeTab + 1))}
+            >
+              Next
+            </Button>
+          )}
+        </Box>
+      </Box>
+    </Container>
+  );
+};
+
+export default NewPortfolioPage;
-- 
2.34.1

